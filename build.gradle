plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
     // This should be below the net.minecraftforge.gradle plugin
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id "com.hypherionmc.modutils.modpublisher" version "2.1.7"
}

// Mixin
apply plugin: 'org.spongepowered.mixin'

mixin {
    // MixinGradle Settings
    add sourceSets.main, 'mixins.umapyoi.refmap.json'
    config 'mixins.umapyoi.json'

    // Specify options for dev run configs
    debug.verbose = true
    debug.export = true
}

version = '1.9.50-1.20.1'
group = 'net.tracen' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'umapyoi'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'umapyoi'
            arg '-mixin.config=mixins.umapyoi.json'
            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'
			property 'mixin.env.remapRefMap', 'true'

            mods {
                umapyoi {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'umapyoi'
            arg '-mixin.config=mixins.umapyoi.json'
            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'
			property 'mixin.env.remapRefMap', 'true'

            mods {
                umapyoi {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'umapyoi'
            arg '-mixin.config=mixins.umapyoi.json'
            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'
			property 'mixin.env.remapRefMap', 'true'

            mods {
                umapyoi {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'umapyoi'
            arg '-mixin.config=mixins.umapyoi.json'
            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'
			property 'mixin.env.remapRefMap', 'true'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'umapyoi', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                umapyoi {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    maven { url = "https://raw.github.com/0999312/MMMaven/main/repository" }
    maven {
        url = "https://maven.theillusivec4.top/"
    }

    // Patchouli
    maven { url = 'https://maven.blamejared.com' }

    maven {
        url = "https://api.modrinth.com/maven"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.2.32'
    // Apply Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation fg.deobf("cn.mcmod_mmf.mysterious_mountain_lib:MMLib:1.5.21-1.20.1")
    // Compile against only the API artifact
    compileOnly(fg.deobf("top.theillusivec4.curios:curios-forge:5.4.5+1.20.1:api"))
    // Use the full Curios API jar at runtime
    runtimeOnly(fg.deobf("top.theillusivec4.curios:curios-forge:5.4.5+1.20.1"))
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.20.1-83-FORGE")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.20.1-83-FORGE")

    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))
    
    //implementation fg.deobf("maven.modrinth:epic-fight:20.9.2")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "umapyoi",
                "Specification-Vendor"    : "tracen_minecraft_group",
                "Specification-Version"   : "0.0.2",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "tracen_minecraft_group",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "mixins.umapyoi.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${maven_loc}"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

publisher {
    // Setup the required API keys. You only need to define the keys for 
    // the platforms you plan on uploading to
    apiKeys {
        // Modrinth Token
        modrinth System.getenv("MODRINTH_TOKEN")
        // Curseforge Token
        curseforge System.getenv("CURSE_TOKEN")
    }

    // Enable Debug mode. When enabled, no files will actually be uploaded
    // setDebug(true)

    // Curseforge Project ID
    setCurseID("776121")

    // Modrinth Project ID
    setModrinthID("umapyoi")

    // Type of release. beta, alpha or release
    setVersionType("release")

    // Changelog. This can be a file, string, OR, gist/github url
    // For example: markdown.md, or "This is my changelog"
    // Or: https://raw.githubusercontent.com/hypherionmc/changelogs/changelog.md
    // Or https://gist.githubusercontent.com/hypherionmc/92f825d3c9337964cc77c9c8c9bf65e6/raw/ceeaaee5b98c688a23398864fe480b84796a1651/test_gist.md
    setChangelog("Changelog WIP, Standby")

    // Required for Modrinth/GitHub
    setVersion("${project.version}")

    // Fancy display name for the upload.
    // Will default to the project version if not set
    setDisplayName("[1.20.1] Umapyoi - ${project.version}")

    // The supported game versions
    setGameVersions("1.20.1")

    // The modloaders your upload supports.
    // This can also be an Enum from ModLoader,
    // like setLoaders(ModLoader.FABRIC, ModLoader.FORGE)
    setLoaders("forge", "neoforge")

    // The new Curseforge Environment tag. Optional
    // Valid values are "server", "client" or "both"
    // You can also use CurseEnvironment.BOTH, or CurseEnvironment.SERVER or CurseEnvironment.CLIENT
    setCurseEnvironment("both")

    // The file to be uploaded. This can be a file, task, or string.
    // setArtifact("build/libs/mymod.jar")
    // setArtifact(jar.getArchiveFile().get())
    // If this is a task, the task specified will be executed before publishing
    setArtifact(jar)

    // Add supported java versions. Currently only used by CurseForge
    setJavaVersions("Java 17", "Java 18", "Java 21", "Java 20", "Java 21")

    // Safety check to check if the artifact contains a valid mod metadata entry,
    // which could possibly mean that the jar is empty
    setDisableEmptyJarCheck(true)

	// Curse Dependencies
	curseDepends {
		required "mysterious-mountain-lib", "curios"
		
	    optional 'create'

	    optional 'jei'
	    
	    optional 'patchouli'
	    	    
	    optional 'terrafirmacraft'
	}
	
	modrinthDepends {
		required "mmlib", "curios"
		
	    optional 'create'

	    optional 'jei'
	    
	    optional 'patchouli'
	    	    
	    optional 'terrafirmacraft'
	}

}
